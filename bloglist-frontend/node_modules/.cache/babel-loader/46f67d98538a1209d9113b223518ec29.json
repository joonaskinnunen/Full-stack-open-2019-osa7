{"ast":null,"code":"import _toConsumableArray from \"/Users/joonaskinnunen/Projects/Full-stack-open-2019-osa7/bloglist-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/joonaskinnunen/Projects/Full-stack-open-2019-osa7/bloglist-frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/joonaskinnunen/Projects/Full-stack-open-2019-osa7/bloglist-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport commentsService from '../services/comments';\nexport var initializeComments = function initializeComments() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        var comments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return commentsService.getAll();\n\n              case 2:\n                comments = _context.sent;\n                dispatch({\n                  type: 'INIT_COMMENTS',\n                  comments: comments\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var newComment = function newComment(commentObj) {\n  console.log(commentObj);\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(dispatch) {\n        var addedComment;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return commentsService.create(commentObj);\n\n              case 2:\n                addedComment = _context2.sent;\n                console.log(addedComment);\n                dispatch({\n                  type: 'NEW_COMMENT',\n                  addedComment: addedComment\n                });\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n};\n\nvar commentsReducer = function commentsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  console.log(action);\n\n  switch (action.type) {\n    case 'INIT_COMMENTS':\n      return action.comments;\n\n    case 'NEW_COMMENT':\n      return [].concat(_toConsumableArray(state), [action.addedComment]);\n\n    default:\n      return state;\n  }\n};\n\nexport default commentsReducer;","map":{"version":3,"sources":["/Users/joonaskinnunen/Projects/Full-stack-open-2019-osa7/bloglist-frontend/src/reducers/commentsReducer.js"],"names":["commentsService","initializeComments","dispatch","getAll","comments","type","newComment","commentObj","console","log","create","addedComment","commentsReducer","state","action"],"mappings":";;;AAAA,OAAOA,eAAP,MAA4B,sBAA5B;AAEA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AACpC;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAO,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACoBF,eAAe,CAACG,MAAhB,EADpB;;AAAA;AACGC,gBAAAA,QADH;AAEHF,gBAAAA,QAAQ,CAAC;AACLG,kBAAAA,IAAI,EAAE,eADD;AAELD,kBAAAA,QAAQ,EAARA;AAFK,iBAAD,CAAR;;AAFG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAOH,CARM;AAUP,OAAO,IAAME,UAAU,GAAG,SAAbA,UAAa,CAACC,UAAD,EAAgB;AACtCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AACA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAO,kBAAML,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACwBF,eAAe,CAACU,MAAhB,CAAuBH,UAAvB,CADxB;;AAAA;AACGI,gBAAAA,YADH;AAEHH,gBAAAA,OAAO,CAACC,GAAR,CAAYE,YAAZ;AACAT,gBAAAA,QAAQ,CAAC;AACLG,kBAAAA,IAAI,EAAE,aADD;AAELM,kBAAAA,YAAY,EAAZA;AAFK,iBAAD,CAAR;;AAHG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAQH,CAVM;;AAYP,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAwB;AAAA,MAAvBC,KAAuB,uEAAf,EAAe;AAAA,MAAXC,MAAW;AAC5CN,EAAAA,OAAO,CAACC,GAAR,CAAYK,MAAZ;;AACA,UAAQA,MAAM,CAACT,IAAf;AACI,SAAK,eAAL;AACI,aAAOS,MAAM,CAACV,QAAd;;AACJ,SAAK,aAAL;AACI,0CAAWS,KAAX,IAAkBC,MAAM,CAACH,YAAzB;;AACJ;AAAS,aAAOE,KAAP;AALb;AAOH,CATD;;AAWA,eAAeD,eAAf","sourcesContent":["import commentsService from '../services/comments'\n\nexport const initializeComments = () => {\n    return async dispatch => {\n        const comments = await commentsService.getAll()\n        dispatch({\n            type: 'INIT_COMMENTS',\n            comments\n        })\n    }\n}\n\nexport const newComment = (commentObj) => {\n    console.log(commentObj)\n    return async dispatch => {\n        const addedComment = await commentsService.create(commentObj)\n        console.log(addedComment)\n        dispatch({\n            type: 'NEW_COMMENT',\n            addedComment\n        })\n    }\n}\n\nconst commentsReducer = (state = [], action) => {\n    console.log(action)\n    switch (action.type) {\n        case 'INIT_COMMENTS':\n            return action.comments\n        case 'NEW_COMMENT':\n            return [...state, action.addedComment]\n        default: return state\n    }\n}\n\nexport default commentsReducer"]},"metadata":{},"sourceType":"module"}